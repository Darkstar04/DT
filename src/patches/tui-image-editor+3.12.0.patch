diff --git a/node_modules/tui-image-editor/dist/tui-image-editor.js b/node_modules/tui-image-editor/dist/tui-image-editor.js
index 818d3b9..68bc871 100644
--- a/node_modules/tui-image-editor/dist/tui-image-editor.js
+++ b/node_modules/tui-image-editor/dist/tui-image-editor.js
@@ -1924,7 +1924,7 @@ eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n
 /***/ (function(module, exports, __webpack_require__) {
 
 "use strict";
-eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _colorpicker = __webpack_require__(/*! @/ui/tools/colorpicker */ \"./src/js/ui/tools/colorpicker.js\");\n\nvar _colorpicker2 = _interopRequireDefault(_colorpicker);\n\nvar _range = __webpack_require__(/*! @/ui/tools/range */ \"./src/js/ui/tools/range.js\");\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _submenuBase = __webpack_require__(/*! @/ui/submenuBase */ \"./src/js/ui/submenuBase.js\");\n\nvar _submenuBase2 = _interopRequireDefault(_submenuBase);\n\nvar _draw = __webpack_require__(/*! @/ui/template/submenu/draw */ \"./src/js/ui/template/submenu/draw.js\");\n\nvar _draw2 = _interopRequireDefault(_draw);\n\nvar _util = __webpack_require__(/*! @/util */ \"./src/js/util.js\");\n\nvar _consts = __webpack_require__(/*! @/consts */ \"./src/js/consts.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DRAW_OPACITY = 0.7;\n\n/**\n * Draw ui class\n * @class\n * @ignore\n */\n\nvar Draw = function (_Submenu) {\n  _inherits(Draw, _Submenu);\n\n  function Draw(subMenuElement, _ref) {\n    var locale = _ref.locale,\n        makeSvgIcon = _ref.makeSvgIcon,\n        menuBarPosition = _ref.menuBarPosition,\n        usageStatistics = _ref.usageStatistics;\n\n    _classCallCheck(this, Draw);\n\n    var _this = _possibleConstructorReturn(this, (Draw.__proto__ || Object.getPrototypeOf(Draw)).call(this, subMenuElement, {\n      locale: locale,\n      name: 'draw',\n      makeSvgIcon: makeSvgIcon,\n      menuBarPosition: menuBarPosition,\n      templateHtml: _draw2.default,\n      usageStatistics: usageStatistics\n    }));\n\n    _this._els = {\n      lineSelectButton: _this.selector('.tie-draw-line-select-button'),\n      drawColorPicker: new _colorpicker2.default(_this.selector('.tie-draw-color'), '#00a9ff', _this.toggleDirection, _this.usageStatistics),\n      drawRange: new _range2.default({\n        slider: _this.selector('.tie-draw-range'),\n        input: _this.selector('.tie-draw-range-value')\n      }, _consts.defaultDrawRangeValues)\n    };\n\n    _this.type = null;\n    _this.color = _this._els.drawColorPicker.color;\n    _this.width = _this._els.drawRange.value;\n    return _this;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n\n\n  _createClass(Draw, [{\n    key: 'destroy',\n    value: function destroy() {\n      this._removeEvent();\n      this._els.drawColorPicker.destroy();\n      this._els.drawRange.destroy();\n\n      (0, _util.assignmentForDestroy)(this);\n    }\n\n    /**\n     * Add event for draw\n     * @param {Object} actions - actions for crop\n     *   @param {Function} actions.setDrawMode - set draw mode\n     */\n\n  }, {\n    key: 'addEvent',\n    value: function addEvent(actions) {\n      this.eventHandler.changeDrawType = this._changeDrawType.bind(this);\n\n      this.actions = actions;\n      this._els.lineSelectButton.addEventListener('click', this.eventHandler.changeDrawType);\n      this._els.drawColorPicker.on('change', this._changeDrawColor.bind(this));\n      this._els.drawRange.on('change', this._changeDrawRange.bind(this));\n    }\n\n    /**\n     * Remove event\n     * @private\n     */\n\n  }, {\n    key: '_removeEvent',\n    value: function _removeEvent() {\n      this._els.lineSelectButton.removeEventListener('click', this.eventHandler.changeDrawType);\n      this._els.drawColorPicker.off();\n      this._els.drawRange.off();\n    }\n\n    /**\n     * set draw mode - action runner\n     */\n\n  }, {\n    key: 'setDrawMode',\n    value: function setDrawMode() {\n      this.actions.setDrawMode(this.type, {\n        width: this.width,\n        color: (0, _util.getRgb)(this.color, DRAW_OPACITY)\n      });\n    }\n\n    /**\n     * Returns the menu to its default state.\n     */\n\n  }, {\n    key: 'changeStandbyMode',\n    value: function changeStandbyMode() {\n      this.type = null;\n      this.actions.stopDrawingMode();\n      this.actions.changeSelectableAll(true);\n      this._els.lineSelectButton.classList.remove('free');\n      this._els.lineSelectButton.classList.remove('line');\n    }\n\n    /**\n     * Executed when the menu starts.\n     */\n\n  }, {\n    key: 'changeStartMode',\n    value: function changeStartMode() {\n      this.type = 'free';\n      this._els.lineSelectButton.classList.add('free');\n      this.setDrawMode();\n    }\n\n    /**\n     * Change draw type event\n     * @param {object} event - line select event\n     * @private\n     */\n\n  }, {\n    key: '_changeDrawType',\n    value: function _changeDrawType(event) {\n      var button = event.target.closest('.tui-image-editor-button');\n      if (button) {\n        var lineType = this.getButtonType(button, ['free', 'line']);\n        this.actions.discardSelection();\n\n        if (this.type === lineType) {\n          this.changeStandbyMode();\n\n          return;\n        }\n\n        this.changeStandbyMode();\n        this.type = lineType;\n        this._els.lineSelectButton.classList.add(lineType);\n        this.setDrawMode();\n      }\n    }\n\n    /**\n     * Change drawing color\n     * @param {string} color - select drawing color\n     * @private\n     */\n\n  }, {\n    key: '_changeDrawColor',\n    value: function _changeDrawColor(color) {\n      this.color = color || 'transparent';\n      if (!this.type) {\n        this.changeStartMode();\n      } else {\n        this.setDrawMode();\n      }\n    }\n\n    /**\n     * Change drawing Range\n     * @param {number} value - select drawing range\n     * @private\n     */\n\n  }, {\n    key: '_changeDrawRange',\n    value: function _changeDrawRange(value) {\n      this.width = value;\n      if (!this.type) {\n        this.changeStartMode();\n      } else {\n        this.setDrawMode();\n      }\n    }\n  }]);\n\n  return Draw;\n}(_submenuBase2.default);\n\nexports.default = Draw;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/draw.js?");
+eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _colorpicker = __webpack_require__(/*! @/ui/tools/colorpicker */ \"./src/js/ui/tools/colorpicker.js\");\n\nvar _colorpicker2 = _interopRequireDefault(_colorpicker);\n\nvar _range = __webpack_require__(/*! @/ui/tools/range */ \"./src/js/ui/tools/range.js\");\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _submenuBase = __webpack_require__(/*! @/ui/submenuBase */ \"./src/js/ui/submenuBase.js\");\n\nvar _submenuBase2 = _interopRequireDefault(_submenuBase);\n\nvar _draw = __webpack_require__(/*! @/ui/template/submenu/draw */ \"./src/js/ui/template/submenu/draw.js\");\n\nvar _draw2 = _interopRequireDefault(_draw);\n\nvar _util = __webpack_require__(/*! @/util */ \"./src/js/util.js\");\n\nvar _consts = __webpack_require__(/*! @/consts */ \"./src/js/consts.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DRAW_OPACITY = 1.0;\n\n/**\n * Draw ui class\n * @class\n * @ignore\n */\n\nvar Draw = function (_Submenu) {\n  _inherits(Draw, _Submenu);\n\n  function Draw(subMenuElement, _ref) {\n    var locale = _ref.locale,\n        makeSvgIcon = _ref.makeSvgIcon,\n        menuBarPosition = _ref.menuBarPosition,\n        usageStatistics = _ref.usageStatistics;\n\n    _classCallCheck(this, Draw);\n\n    var _this = _possibleConstructorReturn(this, (Draw.__proto__ || Object.getPrototypeOf(Draw)).call(this, subMenuElement, {\n      locale: locale,\n      name: 'draw',\n      makeSvgIcon: makeSvgIcon,\n      menuBarPosition: menuBarPosition,\n      templateHtml: _draw2.default,\n      usageStatistics: usageStatistics\n    }));\n\n    _this._els = {\n      lineSelectButton: _this.selector('.tie-draw-line-select-button'),\n      drawColorPicker: new _colorpicker2.default(_this.selector('.tie-draw-color'), '#00FF00', _this.toggleDirection, _this.usageStatistics),\n      drawRange: new _range2.default({\n        slider: _this.selector('.tie-draw-range'),\n        input: _this.selector('.tie-draw-range-value')\n      }, _consts.defaultDrawRangeValues)\n    };\n\n    _this.type = null;\n    _this.color = _this._els.drawColorPicker.color;\n    _this.width = _this._els.drawRange.value;\n    return _this;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n\n\n  _createClass(Draw, [{\n    key: 'destroy',\n    value: function destroy() {\n      this._removeEvent();\n      this._els.drawColorPicker.destroy();\n      this._els.drawRange.destroy();\n\n      (0, _util.assignmentForDestroy)(this);\n    }\n\n    /**\n     * Add event for draw\n     * @param {Object} actions - actions for crop\n     *   @param {Function} actions.setDrawMode - set draw mode\n     */\n\n  }, {\n    key: 'addEvent',\n    value: function addEvent(actions) {\n      this.eventHandler.changeDrawType = this._changeDrawType.bind(this);\n\n      this.actions = actions;\n      this._els.lineSelectButton.addEventListener('click', this.eventHandler.changeDrawType);\n      this._els.drawColorPicker.on('change', this._changeDrawColor.bind(this));\n      this._els.drawRange.on('change', this._changeDrawRange.bind(this));\n    }\n\n    /**\n     * Remove event\n     * @private\n     */\n\n  }, {\n    key: '_removeEvent',\n    value: function _removeEvent() {\n      this._els.lineSelectButton.removeEventListener('click', this.eventHandler.changeDrawType);\n      this._els.drawColorPicker.off();\n      this._els.drawRange.off();\n    }\n\n    /**\n     * set draw mode - action runner\n     */\n\n  }, {\n    key: 'setDrawMode',\n    value: function setDrawMode() {\n      this.actions.setDrawMode(this.type, {\n        width: this.width,\n        color: (0, _util.getRgb)(this.color, DRAW_OPACITY)\n      });\n    }\n\n    /**\n     * Returns the menu to its default state.\n     */\n\n  }, {\n    key: 'changeStandbyMode',\n    value: function changeStandbyMode() {\n      this.type = null;\n      this.actions.stopDrawingMode();\n      this.actions.changeSelectableAll(true);\n      this._els.lineSelectButton.classList.remove('free');\n      this._els.lineSelectButton.classList.remove('line');\n    }\n\n    /**\n     * Executed when the menu starts.\n     */\n\n  }, {\n    key: 'changeStartMode',\n    value: function changeStartMode() {\n      this.type = 'free';\n      this._els.lineSelectButton.classList.add('free');\n      this.setDrawMode();\n    }\n\n    /**\n     * Change draw type event\n     * @param {object} event - line select event\n     * @private\n     */\n\n  }, {\n    key: '_changeDrawType',\n    value: function _changeDrawType(event) {\n      var button = event.target.closest('.tui-image-editor-button');\n      if (button) {\n        var lineType = this.getButtonType(button, ['free', 'line']);\n        this.actions.discardSelection();\n\n        if (this.type === lineType) {\n          this.changeStandbyMode();\n\n          return;\n        }\n\n        this.changeStandbyMode();\n        this.type = lineType;\n        this._els.lineSelectButton.classList.add(lineType);\n        this.setDrawMode();\n      }\n    }\n\n    /**\n     * Change drawing color\n     * @param {string} color - select drawing color\n     * @private\n     */\n\n  }, {\n    key: '_changeDrawColor',\n    value: function _changeDrawColor(color) {\n      this.color = color || 'transparent';\n      if (!this.type) {\n        this.changeStartMode();\n      } else {\n        this.setDrawMode();\n      }\n    }\n\n    /**\n     * Change drawing Range\n     * @param {number} value - select drawing range\n     * @private\n     */\n\n  }, {\n    key: '_changeDrawRange',\n    value: function _changeDrawRange(value) {\n      this.width = value;\n      if (!this.type) {\n        this.changeStartMode();\n      } else {\n        this.setDrawMode();\n      }\n    }\n  }]);\n\n  return Draw;\n}(_submenuBase2.default);\n\nexports.default = Draw;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/draw.js?");
 
 /***/ }),
 
@@ -2212,7 +2212,7 @@ eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n
 /***/ (function(module, exports, __webpack_require__) {
 
 "use strict";
-eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tuiCodeSnippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\nvar _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);\n\nvar _tuiColorPicker = __webpack_require__(/*! tui-color-picker */ \"tui-color-picker\");\n\nvar _tuiColorPicker2 = _interopRequireDefault(_tuiColorPicker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PICKER_COLOR = ['#000000', '#2a2a2a', '#545454', '#7e7e7e', '#a8a8a8', '#d2d2d2', '#ffffff', '', '#ff4040', '#ff6518', '#ffbb3b', '#03bd9e', '#00a9ff', '#515ce6', '#9e5fff', '#ff5583'];\n\n/**\n * Colorpicker control class\n * @class\n * @ignore\n */\n\nvar Colorpicker = function () {\n  function Colorpicker(colorpickerElement) {\n    var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#7e7e7e';\n    var toggleDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'up';\n    var usageStatistics = arguments[3];\n\n    _classCallCheck(this, Colorpicker);\n\n    this.colorpickerElement = colorpickerElement;\n    this.usageStatistics = usageStatistics;\n\n    this._show = false;\n\n    this._colorpickerElement = colorpickerElement;\n    this._toggleDirection = toggleDirection;\n    this._makePickerButtonElement(defaultColor);\n    this._makePickerLayerElement(colorpickerElement, colorpickerElement.getAttribute('title'));\n    this._color = defaultColor;\n    this.picker = _tuiColorPicker2.default.create({\n      container: this.pickerElement,\n      preset: PICKER_COLOR,\n      color: defaultColor,\n      usageStatistics: this.usageStatistics\n    });\n\n    this._addEvent();\n  }\n\n  /**\n   * Destroys the instance.\n   */\n\n\n  _createClass(Colorpicker, [{\n    key: 'destroy',\n    value: function destroy() {\n      var _this = this;\n\n      this._removeEvent();\n      this.picker.destroy();\n      this.colorpickerElement.innerHTML = '';\n      _tuiCodeSnippet2.default.forEach(this, function (value, key) {\n        _this[key] = null;\n      });\n    }\n\n    /**\n     * Get color\n     * @returns {Number} color value\n     */\n\n  }, {\n    key: '_changeColorElement',\n\n\n    /**\n     * Change color element\n     * @param {string} color color value\n     * #private\n     */\n    value: function _changeColorElement(color) {\n      if (color) {\n        this.colorElement.classList.remove('transparent');\n        this.colorElement.style.backgroundColor = color;\n      } else {\n        this.colorElement.style.backgroundColor = '#fff';\n        this.colorElement.classList.add('transparent');\n      }\n    }\n\n    /**\n     * Make picker button element\n     * @param {string} defaultColor color value\n     * @private\n     */\n\n  }, {\n    key: '_makePickerButtonElement',\n    value: function _makePickerButtonElement(defaultColor) {\n      this.colorpickerElement.classList.add('tui-image-editor-button');\n\n      this.colorElement = document.createElement('div');\n      this.colorElement.className = 'color-picker-value';\n      if (defaultColor) {\n        this.colorElement.style.backgroundColor = defaultColor;\n      } else {\n        this.colorElement.classList.add('transparent');\n      }\n    }\n\n    /**\n     * Make picker layer element\n     * @param {HTMLElement} colorpickerElement color picker element\n     * @param {string} title picker title\n     * @private\n     */\n\n  }, {\n    key: '_makePickerLayerElement',\n    value: function _makePickerLayerElement(colorpickerElement, title) {\n      var label = document.createElement('label');\n      var triangle = document.createElement('div');\n\n      this.pickerControl = document.createElement('div');\n      this.pickerControl.className = 'color-picker-control';\n\n      this.pickerElement = document.createElement('div');\n      this.pickerElement.className = 'color-picker';\n\n      label.innerHTML = title;\n      triangle.className = 'triangle';\n\n      this.pickerControl.appendChild(this.pickerElement);\n      this.pickerControl.appendChild(triangle);\n\n      colorpickerElement.appendChild(this.pickerControl);\n      colorpickerElement.appendChild(this.colorElement);\n      colorpickerElement.appendChild(label);\n    }\n\n    /**\n     * Add event\n     * @private\n     */\n\n  }, {\n    key: '_addEvent',\n    value: function _addEvent() {\n      var _this2 = this;\n\n      this.picker.on('selectColor', function (value) {\n        _this2._changeColorElement(value.color);\n        _this2._color = value.color;\n        _this2.fire('change', value.color);\n      });\n\n      this.eventHandler = {\n        pickerToggle: this._pickerToggleEventHandler.bind(this),\n        pickerHide: function pickerHide() {\n          return _this2.hide();\n        }\n      };\n\n      this.colorpickerElement.addEventListener('click', this.eventHandler.pickerToggle);\n      document.body.addEventListener('click', this.eventHandler.pickerHide);\n    }\n\n    /**\n     * Remove event\n     * @private\n     */\n\n  }, {\n    key: '_removeEvent',\n    value: function _removeEvent() {\n      this.colorpickerElement.removeEventListener('click', this.eventHandler.pickerToggle);\n      document.body.removeEventListener('click', this.eventHandler.pickerHide);\n      this.picker.off();\n    }\n\n    /**\n     * Picker toggle event handler\n     * @param {object} event - change event\n     * @private\n     */\n\n  }, {\n    key: '_pickerToggleEventHandler',\n    value: function _pickerToggleEventHandler(event) {\n      var target = event.target;\n\n      var isInPickerControl = target && this._isElementInColorPickerControl(target);\n\n      if (!isInPickerControl || isInPickerControl && this._isPaletteButton(target)) {\n        this._show = !this._show;\n        this.pickerControl.style.display = this._show ? 'block' : 'none';\n        this._setPickerControlPosition();\n        this.fire('changeShow', this);\n      }\n      event.stopPropagation();\n    }\n\n    /**\n     * Check hex input or not\n     * @param {Element} target - Event target element\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_isPaletteButton',\n    value: function _isPaletteButton(target) {\n      return target.className === 'tui-colorpicker-palette-button';\n    }\n\n    /**\n     * Check given element is in pickerControl element\n     * @param {Element} element - element to check\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_isElementInColorPickerControl',\n    value: function _isElementInColorPickerControl(element) {\n      var parentNode = element;\n\n      while (parentNode !== document.body) {\n        if (!parentNode) {\n          break;\n        }\n\n        if (parentNode === this.pickerControl) {\n          return true;\n        }\n\n        parentNode = parentNode.parentNode;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this._show = false;\n      this.pickerControl.style.display = 'none';\n    }\n\n    /**\n     * Set picker control position\n     * @private\n     */\n\n  }, {\n    key: '_setPickerControlPosition',\n    value: function _setPickerControlPosition() {\n      var controlStyle = this.pickerControl.style;\n      var halfPickerWidth = this._colorpickerElement.clientWidth / 2 + 2;\n      var left = this.pickerControl.offsetWidth / 2 - halfPickerWidth;\n      var top = (this.pickerControl.offsetHeight + 10) * -1;\n\n      if (this._toggleDirection === 'down') {\n        top = 30;\n      }\n\n      controlStyle.top = top + 'px';\n      controlStyle.left = '-' + left + 'px';\n    }\n  }, {\n    key: 'color',\n    get: function get() {\n      return this._color;\n    }\n\n    /**\n     * Set color\n     * @param {string} color color value\n     */\n    ,\n    set: function set(color) {\n      this._color = color;\n      this._changeColorElement(color);\n    }\n  }]);\n\n  return Colorpicker;\n}();\n\n_tuiCodeSnippet2.default.CustomEvents.mixin(Colorpicker);\nexports.default = Colorpicker;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/tools/colorpicker.js?");
+eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tuiCodeSnippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\nvar _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);\n\nvar _tuiColorPicker = __webpack_require__(/*! tui-color-picker */ \"tui-color-picker\");\n\nvar _tuiColorPicker2 = _interopRequireDefault(_tuiColorPicker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PICKER_COLOR = ['#00FF00', '#00CD00', '#FF0000', '#FFFFFF', '#FF00FF', '#0000FF', '#646464', '','#000000', '#2a2a2a', '#545454', '#7e7e7e', '#a8a8a8', '#d2d2d2', '#ffffff', '', '#ff4040', '#ff6518', '#ffbb3b', '#03bd9e', '#00a9ff', '#515ce6', '#9e5fff', '#ff5583'];\n\n/**\n * Colorpicker control class\n * @class\n * @ignore\n */\n\nvar Colorpicker = function () {\n  function Colorpicker(colorpickerElement) {\n    var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#7e7e7e';\n    var toggleDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'up';\n    var usageStatistics = arguments[3];\n\n    _classCallCheck(this, Colorpicker);\n\n    this.colorpickerElement = colorpickerElement;\n    this.usageStatistics = usageStatistics;\n\n    this._show = false;\n\n    this._colorpickerElement = colorpickerElement;\n    this._toggleDirection = toggleDirection;\n    this._makePickerButtonElement(defaultColor);\n    this._makePickerLayerElement(colorpickerElement, colorpickerElement.getAttribute('title'));\n    this._color = defaultColor;\n    this.picker = _tuiColorPicker2.default.create({\n      container: this.pickerElement,\n      preset: PICKER_COLOR,\n      color: defaultColor,\n      usageStatistics: this.usageStatistics\n    });\n\n    this._addEvent();\n  }\n\n  /**\n   * Destroys the instance.\n   */\n\n\n  _createClass(Colorpicker, [{\n    key: 'destroy',\n    value: function destroy() {\n      var _this = this;\n\n      this._removeEvent();\n      this.picker.destroy();\n      this.colorpickerElement.innerHTML = '';\n      _tuiCodeSnippet2.default.forEach(this, function (value, key) {\n        _this[key] = null;\n      });\n    }\n\n    /**\n     * Get color\n     * @returns {Number} color value\n     */\n\n  }, {\n    key: '_changeColorElement',\n\n\n    /**\n     * Change color element\n     * @param {string} color color value\n     * #private\n     */\n    value: function _changeColorElement(color) {\n      if (color) {\n        this.colorElement.classList.remove('transparent');\n        this.colorElement.style.backgroundColor = color;\n      } else {\n        this.colorElement.style.backgroundColor = '#fff';\n        this.colorElement.classList.add('transparent');\n      }\n    }\n\n    /**\n     * Make picker button element\n     * @param {string} defaultColor color value\n     * @private\n     */\n\n  }, {\n    key: '_makePickerButtonElement',\n    value: function _makePickerButtonElement(defaultColor) {\n      this.colorpickerElement.classList.add('tui-image-editor-button');\n\n      this.colorElement = document.createElement('div');\n      this.colorElement.className = 'color-picker-value';\n      if (defaultColor) {\n        this.colorElement.style.backgroundColor = defaultColor;\n      } else {\n        this.colorElement.classList.add('transparent');\n      }\n    }\n\n    /**\n     * Make picker layer element\n     * @param {HTMLElement} colorpickerElement color picker element\n     * @param {string} title picker title\n     * @private\n     */\n\n  }, {\n    key: '_makePickerLayerElement',\n    value: function _makePickerLayerElement(colorpickerElement, title) {\n      var label = document.createElement('label');\n      var triangle = document.createElement('div');\n\n      this.pickerControl = document.createElement('div');\n      this.pickerControl.className = 'color-picker-control';\n\n      this.pickerElement = document.createElement('div');\n      this.pickerElement.className = 'color-picker';\n\n      label.innerHTML = title;\n      triangle.className = 'triangle';\n\n      this.pickerControl.appendChild(this.pickerElement);\n      this.pickerControl.appendChild(triangle);\n\n      colorpickerElement.appendChild(this.pickerControl);\n      colorpickerElement.appendChild(this.colorElement);\n      colorpickerElement.appendChild(label);\n    }\n\n    /**\n     * Add event\n     * @private\n     */\n\n  }, {\n    key: '_addEvent',\n    value: function _addEvent() {\n      var _this2 = this;\n\n      this.picker.on('selectColor', function (value) {\n        _this2._changeColorElement(value.color);\n        _this2._color = value.color;\n        _this2.fire('change', value.color);\n      });\n\n      this.eventHandler = {\n        pickerToggle: this._pickerToggleEventHandler.bind(this),\n        pickerHide: function pickerHide() {\n          return _this2.hide();\n        }\n      };\n\n      this.colorpickerElement.addEventListener('click', this.eventHandler.pickerToggle);\n      document.body.addEventListener('click', this.eventHandler.pickerHide);\n    }\n\n    /**\n     * Remove event\n     * @private\n     */\n\n  }, {\n    key: '_removeEvent',\n    value: function _removeEvent() {\n      this.colorpickerElement.removeEventListener('click', this.eventHandler.pickerToggle);\n      document.body.removeEventListener('click', this.eventHandler.pickerHide);\n      this.picker.off();\n    }\n\n    /**\n     * Picker toggle event handler\n     * @param {object} event - change event\n     * @private\n     */\n\n  }, {\n    key: '_pickerToggleEventHandler',\n    value: function _pickerToggleEventHandler(event) {\n      var target = event.target;\n\n      var isInPickerControl = target && this._isElementInColorPickerControl(target);\n\n      if (!isInPickerControl || isInPickerControl && this._isPaletteButton(target)) {\n        this._show = !this._show;\n        this.pickerControl.style.display = this._show ? 'block' : 'none';\n        this._setPickerControlPosition();\n        this.fire('changeShow', this);\n      }\n      event.stopPropagation();\n    }\n\n    /**\n     * Check hex input or not\n     * @param {Element} target - Event target element\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_isPaletteButton',\n    value: function _isPaletteButton(target) {\n      return target.className === 'tui-colorpicker-palette-button';\n    }\n\n    /**\n     * Check given element is in pickerControl element\n     * @param {Element} element - element to check\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_isElementInColorPickerControl',\n    value: function _isElementInColorPickerControl(element) {\n      var parentNode = element;\n\n      while (parentNode !== document.body) {\n        if (!parentNode) {\n          break;\n        }\n\n        if (parentNode === this.pickerControl) {\n          return true;\n        }\n\n        parentNode = parentNode.parentNode;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this._show = false;\n      this.pickerControl.style.display = 'none';\n    }\n\n    /**\n     * Set picker control position\n     * @private\n     */\n\n  }, {\n    key: '_setPickerControlPosition',\n    value: function _setPickerControlPosition() {\n      var controlStyle = this.pickerControl.style;\n      var halfPickerWidth = this._colorpickerElement.clientWidth / 2 + 2;\n      var left = this.pickerControl.offsetWidth / 2 - halfPickerWidth;\n      var top = (this.pickerControl.offsetHeight + 10) * -1;\n\n      if (this._toggleDirection === 'down') {\n        top = 30;\n      }\n\n      controlStyle.top = top + 'px';\n      controlStyle.left = '-' + left + 'px';\n    }\n  }, {\n    key: 'color',\n    get: function get() {\n      return this._color;\n    }\n\n    /**\n     * Set color\n     * @param {string} color color value\n     */\n    ,\n    set: function set(color) {\n      this._color = color;\n      this._changeColorElement(color);\n    }\n  }]);\n\n  return Colorpicker;\n}();\n\n_tuiCodeSnippet2.default.CustomEvents.mixin(Colorpicker);\nexports.default = Colorpicker;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/tools/colorpicker.js?");
 
 /***/ }),
 
